name: lint_changed_models

on:
  workflow_dispatch:
  pull_request:
    branches:
      - sqlfluff-implementation

# concurrency:
#   # Group by workflow and ref, cancel ongoing runs for the same PR/branch
#   group: lint_changed_models-${{ github.ref }}
#   cancel-in-progress: true

env:
  PYTHON_VERSION: '3.9'
  #######  Secrets ######
  #######  Snowflake
  DBT_TUVA_SNOWFLAKE_ACCOUNT: ${{ secrets.DBT_TUVA_SNOWFLAKE_ACCOUNT }}
  DBT_TUVA_CI_DATABASE: ${{ secrets.DBT_TUVA_CI_DATABASE }}
  DBT_SNOWFLAKE_CI_PASSWORD: ${{ secrets.DBT_SNOWFLAKE_CI_PASSWORD }}
  DBT_SNOWFLAKE_CI_ROLE: ${{ secrets.DBT_SNOWFLAKE_CI_ROLE }}
  DBT_SNOWFLAKE_CI_SCHEMA: ${{ secrets.DBT_SNOWFLAKE_CI_SCHEMA }}
  DBT_SNOWFLAKE_CI_USER: ${{ secrets.DBT_SNOWFLAKE_CI_USER }}
  DBT_SNOWFLAKE_CI_WAREHOUSE: ${{ secrets.DBT_SNOWFLAKE_CI_WAREHOUSE }}

# Permissions needed for the comment action
permissions:
  contents: read
  pull-requests: write

jobs:
  sqlfluff-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install dbt adapter needed for compile/lint (using Snowflake here)
          # Also install sqlfluff
          pip install dbt-core==1.8.6 dbt-snowflake sqlfluff==3.3.1 sqlfluff-templater-dbt
      # --- Setup dbt Profile for Linting ---
      - name: Create dbt profiles directory
        run: mkdir -p ~/.dbt

      - name: Create dbt profiles.yml for Snowflake (for linting context)
        run: |


      - name: Get changed model files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '^models/.*\.sql$' || true)
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        

      - name: Lint only changed files
        if: steps.changed-files.outputs.files != ''
        run: |
          echo "${{ steps.changed-files.outputs.files }}" | xargs sqlfluff lint
      # --- Failure Handling ---
      # # Intermediate step to read file content reliably on failure
      # - name: Read Lint Output File on Failure
      #   id: read-lint-output
      #   # Run only if the lint_script step failed
      #   if: failure() && steps.lint_script.outcome == 'failure'
      #   run: |
      #     output_file="SQLFLUFF_LINTER_OUTPUT.TXT" # Matches script variable
      #     if [ -f "$output_file" ]; then
      #       # Read the file content, preserving newlines
      #       content=$(cat "$output_file")
      #     else
      #       content="Lint output file ($output_file) not found."
      #     fi
      #     content="${content//'%'/'%25'}"
      #     EOF_MARKER=$(uuidgen)
      #     echo "content<<${EOF_MARKER}" >> $GITHUB_OUTPUT
      #     echo "$content" >> $GITHUB_OUTPUT
      #     echo "${EOF_MARKER}" >> $GITHUB_OUTPUT
      #   shell: bash

      # - name: Create Comment on PR Failure
      #   # Run only if lint_script failed and it's a pull request event
      #   if: failure() && steps.lint_script.outcome == 'failure' && github.event_name == 'pull_request'
      #   uses: peter-evans/create-or-update-comment@v4
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     body: |
      #       ‚ùå **SQLFluff Linting Failed**
      #       Issues were found that require manual correction or are unfixable by `sqlfluff fix`.
      #       Please review the output below (or the full logs), fix the issues locally, and commit the changes.
      #       ```text
      #       ${{ steps.read-lint-output.outputs.content }}
      #      ```